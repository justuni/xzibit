#!/usr/bin/python
#
# Test script for xzibit.
#
# Thomas Thurman, July 2010.

import os
import sys
import time
import signal
import socket
from subprocess import Popen, PIPE
import getopt

pidsfile = '/tmp/xzibit-pids'
busfile = '/tmp/xzibit-bus'
stderr = file('/tmp/xzibit-stderr', 'a')
test = 'basic'

def usage():
    print 'Usage:'
    print '  ./xzibit-run [switches]'
    print 'Switches:'
    print '  --test foo'
    print '      run test foo'
    print '  --list'
    print '      list tests'
    print '  --pulse'
    print '      pulse the source window'
    print '  --events'
    print '      list events on the source window'

def banner():
    print ' - = - X Z I B I T - = -'

def abort():
    print 'Aborting.'
    sys.exit(2)

def launch(args, stdout=None):
    devnull = file('/dev/null')
    p = Popen(args, stdout=stdout, stderr=devnull)
    if p.returncode > 0:
        print 'When I ran the command ',command
        print 'I was told: ',p.returncode
        print 'This was unexpected.'
        abort()
    file(pidsfile, 'a').write("%d\n" % (p.pid,))

def test_x_server_active(display):
    filename = '/tmp/.X%d-lock' % (display,)
    if os.path.exists(filename):
        test = os.system("DISPLAY=:%d xdpyinfo >/dev/null 2>/dev/null" % (display,))

        if test==0:
            print 'An X server for display :%d is running.' % (display,)
            print 'Please close it and try again.'
            print "If it isn't, please delete the file %s ." % (filename,)
            abort()

def test_bus():
    try:
        server = socket.socket(socket.AF_UNIX,
                               socket.SOCK_STREAM)
        server.connect(busfile)
        server.close()

        return True
    except:
        return False

def succeed(whether, diagnostic=None):
    if whether:
        print ' * * * P A S S * * *'
    else:
        print ' * * * F A I L * * *'

    if diagnostic:
        print diagnostic

    if whether:
        sys.exit(0)
    else:
        sys.exit(1)

def tidy_up():
    if os.path.exists(pidsfile):
        for pid in file(pidsfile,'r').read().split('\n'):
            try:
                pid = int(pid)
                os.kill(pid, signal.SIGKILL)
            except:
                pass
        file(pidsfile, 'w').write('')

banner()

try:
    opts, args = getopt.getopt(sys.argv[1:], "", ["test=", "pulse", "events",
                                                  "help"])
except getopt.GetoptError, err:
    print str(err)
    usage()
    sys.exit(2)

options = {}
for (opt, arg) in opts:
    options[opt] = arg

if options.has_key('--help') or options=={}:
    usage()
    sys.exit()

if options.has_key('--test'):
    test = options['--test']

# Some tests force some options.

if test=='key':
    options['--events'] = ''
    if options.has_key('--pulse'):
        del options['--pulse']

################################################################

# Make sure we're up to date.

os.system("make -s")

need_update = False

plugin_date = os.path.getmtime('/usr/local/lib/mutter/plugins/xzibit.so')
for d in [os.path.getmtime(x) for x in ('xzibit-plugin.o', 'vnc.o')]:
    if d > plugin_date:
        need_update = True

if need_update:
    os.system('make install')

################################################################

have_bus = False

if os.path.exists(busfile):
    have_bus = test_bus()

if not have_bus:
    # so launch one
    os.system('python xzibit-bus-server.py&')
    time.sleep(1)
    if not test_bus():
        print "Could not start xzibit bus."
        abort()

# optionally, we could call tidy_up here
# to close old Xephyr sessions before we
# start.
# tidy_up()

test_x_server_active(3)
test_x_server_active(4)

# -screen HAS to have a height value of 480 or it messes up
# the nested server.  This is apparently known about.

launch(['Xephyr','-screen','200x480',':3','-title','xzibit :3'])
launch(['Xephyr','-screen','200x480',':4','-title','xzibit :4'])

time.sleep(1) # give them a moment to load

# Xephyr doesn't and won't support -geometry
# http://bugs.freedesktop.org/show_bug.cgi?id=12221
launch(['wmctrl','-r','xzibit :3','-e','0,0,0,-1,-1'])
launch(['wmctrl','-r','xzibit :4','-e','0,220,0,-1,-1'])

# Move the terminal as well.  (Should have a way to turn this off)
screen_width = os.popen('xwininfo -root|grep Width').readline()[9:]
screen_height = os.popen('xwininfo -root|grep Height').readline()[10:]
launch(['wmctrl', '-x', '-r', 'Gnome-terminal', '-e',
        '0,450,0,%d,%d' % (int(screen_width)-450,
                           int(screen_height)-100),
        '-b', 'remove,maximized_vert,maximized_horz'])

# TODO: an option to replace the following with: launch(['strace', '-f', '-e', 'trace=file', '../src/mutter', '--replace', '--sync', '--display', ':3'])
# FIXME: the stderr of these processes needs to be monitored
# to check whether it contains an error saying xzibit could
# not be loaded
launch(['../src/mutter', '--replace', '--sync', '--display', ':3'])
launch(['../src/mutter', '--replace', '--sync', '--display', ':4'])

time.sleep(1)

# Give the terminal focus again.
launch(['wmctrl', '-x', '-a', 'Gnome-terminal'])

# Here we tried to add wallpaper to differentiate them visually
# but mutter doesn't like it

autoshare_args = ['./autoshare']
if options.has_key('--pulse'):
    autoshare_args.extend(['--pulse'])
if options.has_key('--events'):
    autoshare_args.extend(['--events'])
events = file('/tmp/xzibit-events', 'w')
autoshare_args.extend(['--display', ':3'])

launch(autoshare_args, stdout=events)

if test in ('keybehind', 'clickbehind'):
    time.sleep(3)
    # FIXME: possibly we shouldn't rely on
    # having xlogo around?
    launch(['xlogo', '-display', ':3'])
    time.sleep(3)

if test in ('key', 'keybehind'):
    time.sleep(10)
    os.system('DISPLAY=:4 ./type-a-key')
    events.close()
    events = file('/tmp/xzibit-events','r').readlines()

    good = 0
    bad = 0

    for event in events:
        if 'keysym' in event:
            print event
            if 'keysym 0x63, c' in event:
                good += 1
            else:
                bad += 1

    if good==0 and bad==0:
        success = False
        diagnostic = 'The keystroke did not arrive.'
    elif bad==0:
        success = True
        diagnostic = None
    else:
        success = False
        diagnostic = 'The keystroke arrived but was misinterpreted.'

    succeed(success, diagnostic)
elif test in ('click', 'clickbehind'):
    time.sleep(10)
    os.system('DISPLAY=:4 ./click-the-mouse')
    events.close()
    events = file('/tmp/xzibit-events','r').readlines()
    print events

if test!='basic':
    tidy_up()
